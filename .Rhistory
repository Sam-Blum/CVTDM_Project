os_log_prob = predict(os_log_reg, newdata = test_df, type = "p")
os_log_pred = data.frame("pred" = colnames(os_log_prob)[apply(os_log_prob,1,which.max)])
os_log_pred$pred = as.factor(os_log_pred$pred)
os_log_cm <- confusionMatrix(os_log_pred$pred, test_df[,11])
os_log_cm
kappa_logist = os_log_cm$overall[2]
kappa_logist
low_sensitivity = os_log_cm$byClass[3,1]
intermediate_sensitivity = os_log_cm$byClass[2,1]
high_sensitivity = os_log_cm$byClass[1,1]
bal_acc_logist = (low_sensitivity + intermediate_sensitivity + high_sensitivity) / 3
bal_acc_logist
os_nb_model = naiveBayes (binned_quality ~ ., data = os_train_df)
os_nb_model
os_nb_pred = predict(os_nb_model, newdata = test_df, type = "class")
os_nb_prob = predict(os_nb_model, newdata = test_df, type = "raw")
bayes_cm <- confusionMatrix(os_nb_pred, test_df[,11])
bayes_cm
kappa_bayes = bayes_cm$overall[2]
kappa_bayes
low_sensitivity = bayes_cm$byClass[3,1]
intermediate_sensitivity = bayes_cm$byClass[2,1]
high_sensitivity = bayes_cm$byClass[1,1]
bal_acc_bayes = (low_sensitivity + intermediate_sensitivity + high_sensitivity) / 3
bal_acc_bayes
set.seed(1)
tree1 <- rpart(binned_quality ~ ., data=os_train_df, method = "class", control = rpart.control(cp = 0, minsplit = 1, minbucket = 1, xval = 5))
# Look at the minimum standard error
printcp(tree1)
which.min(tree1$cptable[, 4])
# Take the cp associated with the minimum standard error to prune the tree:
set.seed(1)
pruned_tree1 <- prune(tree1, cp = tree1$cptable[which.min(tree1$cptable[, "xerror"]), "CP"])
prp(pruned_tree1)
# If we want to look at the most important variables:
pruned_tree1$variable.importance
# We can now predict the outcome:
pruned_tree1_pred_test <- predict(pruned_tree1, test_df, type="class")
pruned_tree1_prob_test <- predict(pruned_tree1, test_df, type="prob")
pruned_tree1_cm <- confusionMatrix(pruned_tree1_pred_test, test_df$binned_quality)
pruned_tree1_cm
kappa_pruned_tree1 = pruned_tree1_cm$overall[2]
kappa_pruned_tree1
low_sensitivity = pruned_tree1_cm$byClass[3,1]
intermediate_sensitivity = pruned_tree1_cm$byClass[2,1]
high_sensitivity = pruned_tree1_cm$byClass[1,1]
bal_acc_pruned_tree1 = (low_sensitivity + intermediate_sensitivity + high_sensitivity) / 3
bal_acc_pruned_tree1
set.seed(1)
boost1 <- boosting(binned_quality ~ ., data=os_train_df, control = rpart.control(xval = 5))
boost1_pred_test <- predict(boost1, test_df, type="class")
boost1_prob_test <- predict(boost1, test_df, type="prob")
boost1_cm <- confusionMatrix(as.factor(boost1_pred_test$class), test_df$binned_quality)
boost1_cm
kappa_boost1 = boost1_cm$overall[2]
kappa_boost1
low_sensitivity = boost1_cm$byClass[3,1]
intermediate_sensitivity = boost1_cm$byClass[2,1]
high_sensitivity = boost1_cm$byClass[1,1]
bal_acc_boost1 = (low_sensitivity + intermediate_sensitivity + high_sensitivity) / 3
bal_acc_boost1
set.seed(1)
bag1 <- bagging(binned_quality ~ ., data=os_train_df, control = rpart.control(xval = 5))
bag1_pred_test <- predict(bag1, test_df, type="class")
bag1_prob_test <- predict(bag1, test_df, type="prob")
bag1_cm <- confusionMatrix(as.factor(bag1_pred_test$class), test_df$binned_quality)
bag1_cm
kappa_bag1 = bag1_cm$overall[2]
kappa_bag1
low_sensitivity = bag1_cm$byClass[3,1]
intermediate_sensitivity = bag1_cm$byClass[2,1]
high_sensitivity = bag1_cm$byClass[1,1]
bal_acc_bag1 = (low_sensitivity + intermediate_sensitivity + high_sensitivity) / 3
bal_acc_bag1
set.seed(1)
rf1 <- randomForest(os_train_df[-11], os_train_df$binned_quality, control = rpart.control(xval = 5))
rf1_pred_test <- predict(rf1, test_df, type="class")
rf1_prob_test <- predict(rf1, test_df, type="prob")
rf1_cm <- confusionMatrix(rf1_pred_test, test_df$binned_quality)
rf1_cm
kappa_rf1 = rf1_cm$overall[2]
kappa_rf1
low_sensitivity = rf1_cm$byClass[3,1]
intermediate_sensitivity = rf1_cm$byClass[2,1]
high_sensitivity = rf1_cm$byClass[1,1]
bal_acc_rf1 = (low_sensitivity + intermediate_sensitivity + high_sensitivity) / 3
bal_acc_rf1
set.seed(1)
nn1 <- neuralnet(high_quality + intermediate_quality + low_quality ~ ., data = train_norm_dummy_df[, -11], hidden = 4, linear.output = FALSE, threshold = 0.5)
test_pred_nn1 <- data.frame(predict(nn1, test_norm_dummy_df[, -c(11, 12, 13, 14)]))
names(test_pred_nn1)[1:3] <- c("High", "Intermediate", "Low")
test_pred_nn1$Prediction <- NA
for(j in 1:length(test_pred_nn1$High)) {
test_pred_nn1[j, 4] <- names(which.max(test_pred_nn1[j, 1:3]))
}
nn1_cm <- confusionMatrix(as.factor(test_pred_nn1$Prediction), test_norm_df$binned_quality)
nn1_cm
kappa_nn1 = nn1_cm$overall[2]
kappa_nn1
low_sensitivity = nn1_cm$byClass[3,1]
intermediate_sensitivity = nn1_cm$byClass[2,1]
high_sensitivity = nn1_cm$byClass[1,1]
bal_acc_nn1 = (low_sensitivity + intermediate_sensitivity + high_sensitivity) / 3
bal_acc_nn1
results_df = data.frame("method" = c("knn", "logistic regression", "naive Bayes", "classification tree", "boosted tree", "bagged tree", "random forest", "neural net"),
"kappa" = c(kappa_best_knn, kappa_logist, kappa_bayes, kappa_pruned_tree1, kappa_boost1, kappa_bag1, kappa_rf1, kappa_nn1),
"balanced_accuracy" = c(bal_acc_best_knn, bal_acc_logist, bal_acc_bayes, bal_acc_pruned_tree1, bal_acc_boost1, bal_acc_bag1, bal_acc_rf1, bal_acc_nn1))
results_df
all_kappa_plot = ggplot(data = results_df, aes(x = reorder(method, kappa))) +
geom_bar(aes(y = kappa), stat = "identity") +
labs(title = "Kappa for each method", x = "Method", y = "Kappa") +
theme(axis.text.x = element_text(angle=90))
all_bal_acc_plot = ggplot(data = results_df, aes(x = reorder(method, balanced_accuracy))) +
geom_bar(aes(y = balanced_accuracy), stat = "identity") +
labs(title = "Balanced accuracy for each method", x = "Method", y = "Balanced accuracy") +
theme(axis.text.x = element_text(angle=90))
plot_grid(all_kappa_plot, all_bal_acc_plot)
ensemble_prob_low_df = data.frame("knn_prob_low" = attr(best_knn_pred, "prob")[,3],
"log_prob_low" = os_log_prob[,3],
"nb_prob_low" = os_nb_prob[,3],
"tree_prob_low" = pruned_tree1_prob_test[,3],
"boosting_prob_low" = boost1_prob_test$prob[,3],
"bagging_prob_low" = bag1_prob_test$prob[,3],
"rf_prob_low" = rf1_prob_test[,3],
"nnet_prob_low" = test_pred_nn1[,3])
ensemble_prob_low_df$mean_prob_low = apply(ensemble_prob_low_df[,c(1,2,3,5,7)], 1, mean)
head(ensemble_prob_low_df)
ensemble_prob_inter_df = data.frame("knn_prob_inter" = attr(best_knn_pred, "prob")[,2],
"log_prob_inter" = os_log_prob[,2],
"nb_prob_inter" = os_nb_prob[,2],
"tree_prob_inter" = pruned_tree1_prob_test[,2],
"boosting_prob_inter" = boost1_prob_test$prob[,2],
"bagging_prob_inter" = bag1_prob_test$prob[,2],
"rf_prob_inter" = rf1_prob_test[,2],
"nnet_prob_inter" = test_pred_nn1[,2])
ensemble_prob_inter_df$mean_prob_inter = apply(ensemble_prob_inter_df[,c(1,2,3,5,7)], 1, mean)
head(ensemble_prob_inter_df)
ensemble_prob_high_df = data.frame("knn_prob_high" = attr(best_knn_pred, "prob")[,1],
"log_prob_high" = os_log_prob[,1],
"nb_prob_high" = os_nb_prob[,1],
"tree_prob_high" = pruned_tree1_prob_test[,1],
"boosting_prob_high" = boost1_prob_test$prob[,1],
"bagging_prob_high" = bag1_prob_test$prob[,1],
"rf_prob_high" = rf1_prob_test[,1],
"nnet_prob_high" = test_pred_nn1[,1])
ensemble_prob_high_df$mean_prob_high = apply(ensemble_prob_high_df[,c(1,2,3,5,7)], 1, mean)
head(ensemble_prob_high_df)
ensemble_prob_df = data.frame("Low" = ensemble_prob_low_df$mean_prob_low,
"Intermediate" = ensemble_prob_inter_df$mean_prob_inter,
"High" = ensemble_prob_high_df$mean_prob_high)
ensemble_prob_df$mean_prob_pred = as.factor(colnames(ensemble_prob_df)[apply(ensemble_prob_df,1,which.max)])
head(ensemble_prob_df)
ensembles_pred_df = data.frame("actual_value" = test_df$binned_quality,
"knn_pred" = best_knn_pred,
"log_pred" = os_log_pred$pred,
"nb_pred" = os_nb_pred,
"tree_pred" = pruned_tree1_pred_test,
"boosting_pred" = as.factor(boost1_pred_test$class),
"bagging_pred" = as.factor(bag1_pred_test$class),
"rf_pred" = rf1_pred_test,
"nnet_pred" = as.factor(test_pred_nn1$Prediction))
ensembles_pred_df$majority_vote_pred = as.factor(apply(ensembles_pred_df[,c(2,3,4,6,8)], 1, function(x) names(which.max(table(x)))))
ensembles_pred_df$mean_prob_pred = ensemble_prob_df$mean_prob_pred
head(ensembles_pred_df)
majority_vote_cm <- confusionMatrix(ensembles_pred_df$majority_vote_pred, test_df[,11])
majority_vote_cm
kappa_majority = majority_vote_cm$overall[2]
kappa_majority
low_sensitivity = majority_vote_cm$byClass[3,1]
intermediate_sensitivity = majority_vote_cm$byClass[2,1]
high_sensitivity = majority_vote_cm$byClass[1,1]
bal_acc_majority = (low_sensitivity + intermediate_sensitivity + high_sensitivity) / 3
bal_acc_majority
mean_prob_cm <- confusionMatrix(ensembles_pred_df$mean_prob_pred, test_df[,11])
mean_prob_cm
kappa_mean_prob = mean_prob_cm$overall[2]
kappa_mean_prob
low_sensitivity = mean_prob_cm$byClass[3,1]
intermediate_sensitivity = mean_prob_cm$byClass[2,1]
high_sensitivity = mean_prob_cm$byClass[1,1]
bal_acc_mean_prob = (low_sensitivity + intermediate_sensitivity + high_sensitivity) / 3
bal_acc_mean_prob
results_df[9,] = list("majority vote", kappa_majority, bal_acc_majority)
results_df[10,] = list("mean probability", kappa_mean_prob, bal_acc_mean_prob)
all_kappa_plot2 = ggplot(data = results_df, aes(x = reorder(method, kappa))) +
geom_bar(aes(y = kappa), stat = "identity") +
labs(title = "Kappa for each method", x = "Method", y = "Kappa") +
theme(axis.text.x = element_text(angle=90))
all_bal_acc_plot2 = ggplot(data = results_df, aes(x = reorder(method, balanced_accuracy))) +
geom_bar(aes(y = balanced_accuracy), stat = "identity") +
labs(title = "Balanced accuracy for each method", x = "Method", y = "Balanced accuracy") +
theme(axis.text.x = element_text(angle=90))
plot_grid(all_kappa_plot2, all_bal_acc_plot2)
results_df
results_df = data.frame("method" = c("knn", "logistic regression", "naive Bayes", "classification tree", "boosted tree", "bagged tree", "random forest", "neural net"),
"kappa" = c(kappa_best_knn, kappa_logist, kappa_bayes, kappa_pruned_tree1, kappa_boost1, kappa_bag1, kappa_rf1, kappa_nn1),
"balanced_accuracy" = c(bal_acc_best_knn, bal_acc_logist, bal_acc_bayes, bal_acc_pruned_tree1, bal_acc_boost1, bal_acc_bag1, bal_acc_rf1, bal_acc_nn1))
results_df
ensemble_prob_low_df = data.frame("knn_prob_low" = attr(best_knn_pred, "prob")[,3],
"log_prob_low" = os_log_prob[,3],
"nb_prob_low" = os_nb_prob[,3],
"tree_prob_low" = pruned_tree1_prob_test[,3],
"boosting_prob_low" = boost1_prob_test$prob[,3],
"bagging_prob_low" = bag1_prob_test$prob[,3],
"rf_prob_low" = rf1_prob_test[,3],
"nnet_prob_low" = test_pred_nn1[,3])
ensemble_prob_low_df$mean_prob_low = apply(ensemble_prob_low_df[,c(1,2,5,7)], 1, mean)
head(ensemble_prob_low_df)
ensemble_prob_inter_df = data.frame("knn_prob_inter" = attr(best_knn_pred, "prob")[,2],
"log_prob_inter" = os_log_prob[,2],
"nb_prob_inter" = os_nb_prob[,2],
"tree_prob_inter" = pruned_tree1_prob_test[,2],
"boosting_prob_inter" = boost1_prob_test$prob[,2],
"bagging_prob_inter" = bag1_prob_test$prob[,2],
"rf_prob_inter" = rf1_prob_test[,2],
"nnet_prob_inter" = test_pred_nn1[,2])
ensemble_prob_inter_df$mean_prob_inter = apply(ensemble_prob_inter_df[,c(1,2,5,7)], 1, mean)
head(ensemble_prob_inter_df)
ensemble_prob_high_df = data.frame("knn_prob_high" = attr(best_knn_pred, "prob")[,1],
"log_prob_high" = os_log_prob[,1],
"nb_prob_high" = os_nb_prob[,1],
"tree_prob_high" = pruned_tree1_prob_test[,1],
"boosting_prob_high" = boost1_prob_test$prob[,1],
"bagging_prob_high" = bag1_prob_test$prob[,1],
"rf_prob_high" = rf1_prob_test[,1],
"nnet_prob_high" = test_pred_nn1[,1])
ensemble_prob_high_df$mean_prob_high = apply(ensemble_prob_high_df[,c(1,2,5,7)], 1, mean)
head(ensemble_prob_high_df)
ensemble_prob_df = data.frame("Low" = ensemble_prob_low_df$mean_prob_low,
"Intermediate" = ensemble_prob_inter_df$mean_prob_inter,
"High" = ensemble_prob_high_df$mean_prob_high)
ensemble_prob_df$mean_prob_pred = as.factor(colnames(ensemble_prob_df)[apply(ensemble_prob_df,1,which.max)])
head(ensemble_prob_df)
ensembles_pred_df = data.frame("actual_value" = test_df$binned_quality,
"knn_pred" = best_knn_pred,
"log_pred" = os_log_pred$pred,
"nb_pred" = os_nb_pred,
"tree_pred" = pruned_tree1_pred_test,
"boosting_pred" = as.factor(boost1_pred_test$class),
"bagging_pred" = as.factor(bag1_pred_test$class),
"rf_pred" = rf1_pred_test,
"nnet_pred" = as.factor(test_pred_nn1$Prediction))
ensembles_pred_df$majority_vote_pred = as.factor(apply(ensembles_pred_df[,c(2,3,6,8)], 1, function(x) names(which.max(table(x)))))
ensembles_pred_df$mean_prob_pred = ensemble_prob_df$mean_prob_pred
head(ensembles_pred_df)
majority_vote_cm <- confusionMatrix(ensembles_pred_df$majority_vote_pred, test_df[,11])
majority_vote_cm
kappa_majority = majority_vote_cm$overall[2]
kappa_majority
low_sensitivity = majority_vote_cm$byClass[3,1]
intermediate_sensitivity = majority_vote_cm$byClass[2,1]
high_sensitivity = majority_vote_cm$byClass[1,1]
bal_acc_majority = (low_sensitivity + intermediate_sensitivity + high_sensitivity) / 3
bal_acc_majority
mean_prob_cm <- confusionMatrix(ensembles_pred_df$mean_prob_pred, test_df[,11])
mean_prob_cm
kappa_mean_prob = mean_prob_cm$overall[2]
kappa_mean_prob
low_sensitivity = mean_prob_cm$byClass[3,1]
intermediate_sensitivity = mean_prob_cm$byClass[2,1]
high_sensitivity = mean_prob_cm$byClass[1,1]
bal_acc_mean_prob = (low_sensitivity + intermediate_sensitivity + high_sensitivity) / 3
bal_acc_mean_prob
results_df
results_df[9,] = list("majority vote", kappa_majority, bal_acc_majority)
results_df[10,] = list("mean probability", kappa_mean_prob, bal_acc_mean_prob)
results_df
ensembles_pred_df = data.frame("actual_value" = test_df$binned_quality,
"knn_pred" = best_knn_pred,
"log_pred" = os_log_pred$pred,
"nb_pred" = os_nb_pred,
"tree_pred" = pruned_tree1_pred_test,
"boosting_pred" = as.factor(boost1_pred_test$class),
"bagging_pred" = as.factor(bag1_pred_test$class),
"rf_pred" = rf1_pred_test,
"nnet_pred" = as.factor(test_pred_nn1$Prediction))
ensembles_pred_df$majority_vote_pred = as.factor(apply(ensembles_pred_df[,c(2,3,4,6,8)], 1, function(x) names(which.max(table(x)))))
ensembles_pred_df$mean_prob_pred = ensemble_prob_df$mean_prob_pred
head(ensembles_pred_df)
majority_vote_cm <- confusionMatrix(ensembles_pred_df$majority_vote_pred, test_df[,11])
majority_vote_cm
kappa_majority = majority_vote_cm$overall[2]
kappa_majority
low_sensitivity = majority_vote_cm$byClass[3,1]
intermediate_sensitivity = majority_vote_cm$byClass[2,1]
high_sensitivity = majority_vote_cm$byClass[1,1]
bal_acc_majority = (low_sensitivity + intermediate_sensitivity + high_sensitivity) / 3
bal_acc_majority
mean_prob_cm <- confusionMatrix(ensembles_pred_df$mean_prob_pred, test_df[,11])
mean_prob_cm
kappa_mean_prob = mean_prob_cm$overall[2]
kappa_mean_prob
low_sensitivity = mean_prob_cm$byClass[3,1]
intermediate_sensitivity = mean_prob_cm$byClass[2,1]
high_sensitivity = mean_prob_cm$byClass[1,1]
bal_acc_mean_prob = (low_sensitivity + intermediate_sensitivity + high_sensitivity) / 3
bal_acc_mean_prob
results_df[9,] = list("majority vote", kappa_majority, bal_acc_majority)
results_df[10,] = list("mean probability", kappa_mean_prob, bal_acc_mean_prob)
results_df
results_df = data.frame("method" = c("knn", "logistic regression", "naive Bayes", "classification tree", "boosted tree", "bagged tree", "random forest", "neural net"),
"kappa" = c(kappa_best_knn, kappa_logist, kappa_bayes, kappa_pruned_tree1, kappa_boost1, kappa_bag1, kappa_rf1, kappa_nn1),
"balanced_accuracy" = c(bal_acc_best_knn, bal_acc_logist, bal_acc_bayes, bal_acc_pruned_tree1, bal_acc_boost1, bal_acc_bag1, bal_acc_rf1, bal_acc_nn1))
results_df
all_kappa_plot = ggplot(data = results_df, aes(x = reorder(method, kappa))) +
geom_bar(aes(y = kappa), stat = "identity") +
labs(title = "Kappa for each method", x = "Method", y = "Kappa") +
theme(axis.text.x = element_text(angle=90))
all_bal_acc_plot = ggplot(data = results_df, aes(x = reorder(method, balanced_accuracy))) +
geom_bar(aes(y = balanced_accuracy), stat = "identity") +
labs(title = "Balanced accuracy for each method", x = "Method", y = "Balanced accuracy") +
theme(axis.text.x = element_text(angle=90))
plot_grid(all_kappa_plot, all_bal_acc_plot)
ensemble_prob_low_df = data.frame("knn_prob_low" = attr(best_knn_pred, "prob")[,3],
"log_prob_low" = os_log_prob[,3],
"nb_prob_low" = os_nb_prob[,3],
"tree_prob_low" = pruned_tree1_prob_test[,3],
"boosting_prob_low" = boost1_prob_test$prob[,3],
"bagging_prob_low" = bag1_prob_test$prob[,3],
"rf_prob_low" = rf1_prob_test[,3],
"nnet_prob_low" = test_pred_nn1[,3])
ensemble_prob_low_df$mean_prob_low = apply(ensemble_prob_low_df[,c(1,2,5,7)], 1, mean)
head(ensemble_prob_low_df)
ensemble_prob_inter_df = data.frame("knn_prob_inter" = attr(best_knn_pred, "prob")[,2],
"log_prob_inter" = os_log_prob[,2],
"nb_prob_inter" = os_nb_prob[,2],
"tree_prob_inter" = pruned_tree1_prob_test[,2],
"boosting_prob_inter" = boost1_prob_test$prob[,2],
"bagging_prob_inter" = bag1_prob_test$prob[,2],
"rf_prob_inter" = rf1_prob_test[,2],
"nnet_prob_inter" = test_pred_nn1[,2])
ensemble_prob_inter_df$mean_prob_inter = apply(ensemble_prob_inter_df[,c(1,2,5,7)], 1, mean)
head(ensemble_prob_inter_df)
ensemble_prob_high_df = data.frame("knn_prob_high" = attr(best_knn_pred, "prob")[,1],
"log_prob_high" = os_log_prob[,1],
"nb_prob_high" = os_nb_prob[,1],
"tree_prob_high" = pruned_tree1_prob_test[,1],
"boosting_prob_high" = boost1_prob_test$prob[,1],
"bagging_prob_high" = bag1_prob_test$prob[,1],
"rf_prob_high" = rf1_prob_test[,1],
"nnet_prob_high" = test_pred_nn1[,1])
ensemble_prob_high_df$mean_prob_high = apply(ensemble_prob_high_df[,c(1,2,5,7)], 1, mean)
head(ensemble_prob_high_df)
ensemble_prob_df = data.frame("Low" = ensemble_prob_low_df$mean_prob_low,
"Intermediate" = ensemble_prob_inter_df$mean_prob_inter,
"High" = ensemble_prob_high_df$mean_prob_high)
ensemble_prob_df$mean_prob_pred = as.factor(colnames(ensemble_prob_df)[apply(ensemble_prob_df,1,which.max)])
head(ensemble_prob_df)
ensembles_pred_df = data.frame("actual_value" = test_df$binned_quality,
"knn_pred" = best_knn_pred,
"log_pred" = os_log_pred$pred,
"nb_pred" = os_nb_pred,
"tree_pred" = pruned_tree1_pred_test,
"boosting_pred" = as.factor(boost1_pred_test$class),
"bagging_pred" = as.factor(bag1_pred_test$class),
"rf_pred" = rf1_pred_test,
"nnet_pred" = as.factor(test_pred_nn1$Prediction))
ensembles_pred_df$majority_vote_pred = as.factor(apply(ensembles_pred_df[,c(2,3,4,6,8)], 1, function(x) names(which.max(table(x)))))
ensembles_pred_df$mean_prob_pred = ensemble_prob_df$mean_prob_pred
head(ensembles_pred_df)
majority_vote_cm <- confusionMatrix(ensembles_pred_df$majority_vote_pred, test_df[,11])
majority_vote_cm
kappa_majority = majority_vote_cm$overall[2]
kappa_majority
low_sensitivity = majority_vote_cm$byClass[3,1]
intermediate_sensitivity = majority_vote_cm$byClass[2,1]
high_sensitivity = majority_vote_cm$byClass[1,1]
bal_acc_majority = (low_sensitivity + intermediate_sensitivity + high_sensitivity) / 3
bal_acc_majority
mean_prob_cm <- confusionMatrix(ensembles_pred_df$mean_prob_pred, test_df[,11])
mean_prob_cm
kappa_mean_prob = mean_prob_cm$overall[2]
kappa_mean_prob
low_sensitivity = mean_prob_cm$byClass[3,1]
intermediate_sensitivity = mean_prob_cm$byClass[2,1]
high_sensitivity = mean_prob_cm$byClass[1,1]
bal_acc_mean_prob = (low_sensitivity + intermediate_sensitivity + high_sensitivity) / 3
bal_acc_mean_prob
results_df[9,] = list("majority vote", kappa_majority, bal_acc_majority)
results_df[10,] = list("mean probability", kappa_mean_prob, bal_acc_mean_prob)
results_df
plot_knn_cm <- as.data.frame(best_knn_cm$table)
plot_knn_cm$Prediction <- factor(plot_knn_cm$Prediction, levels=rev(levels(plot_knn_cm$Prediction)))
plot_knn_cm <- plot_knn_cm %>%
mutate(pred = ifelse(plot_knn_cm$Prediction == plot_knn_cm$Reference, "correct", "error")) %>%
group_by(Reference) %>%
mutate(prop = Freq/sum(Freq))
plot_os_log_cm <- as.data.frame(os_log_cm$table)
plot_os_log_cm$Prediction <- factor(plot_os_log_cm$Prediction, levels=rev(levels(plot_os_log_cm$Prediction)))
plot_os_log_cm <- plot_os_log_cm %>%
mutate(pred = ifelse(plot_os_log_cm$Prediction == plot_os_log_cm$Reference, "correct", "error")) %>%
group_by(Reference) %>%
mutate(prop = Freq/sum(Freq))
plot_bayes_cm <- as.data.frame(bayes_cm$table)
plot_bayes_cm$Prediction <- factor(plot_bayes_cm$Prediction, levels=rev(levels(plot_bayes_cm$Prediction)))
plot_bayes_cm <- plot_bayes_cm %>%
mutate(pred = ifelse(plot_bayes_cm$Prediction == plot_bayes_cm$Reference, "correct", "error")) %>%
group_by(Reference) %>%
mutate(prop = Freq/sum(Freq))
plot_pruned_tree1_cm <- as.data.frame(pruned_tree1_cm$table)
plot_pruned_tree1_cm$Prediction <- factor(plot_pruned_tree1_cm$Prediction, levels=rev(levels(plot_pruned_tree1_cm$Prediction)))
plot_pruned_tree1_cm <- plot_pruned_tree1_cm %>%
mutate(pred = ifelse(plot_pruned_tree1_cm$Prediction == plot_pruned_tree1_cm$Reference, "correct", "error")) %>%
group_by(Reference) %>%
mutate(prop = Freq/sum(Freq))
plot_boost1_cm <- as.data.frame(boost1_cm$table)
plot_boost1_cm$Prediction <- factor(plot_boost1_cm$Prediction, levels=rev(levels(plot_boost1_cm$Prediction)))
plot_boost1_cm <- plot_boost1_cm %>%
mutate(pred = ifelse(plot_boost1_cm$Prediction == plot_boost1_cm$Reference, "correct", "error")) %>%
group_by(Reference) %>%
mutate(prop = Freq/sum(Freq))
plot_bag1_cm <- as.data.frame(bag1_cm$table)
plot_bag1_cm$Prediction <- factor(plot_bag1_cm$Prediction, levels=rev(levels(plot_bag1_cm$Prediction)))
plot_bag1_cm <- plot_bag1_cm %>%
mutate(pred = ifelse(plot_bag1_cm$Prediction == plot_bag1_cm$Reference, "correct", "error")) %>%
group_by(Reference) %>%
mutate(prop = Freq/sum(Freq))
plot_rf1_cm <- as.data.frame(rf1_cm$table)
plot_rf1_cm$Prediction <- factor(plot_rf1_cm$Prediction, levels=rev(levels(plot_rf1_cm$Prediction)))
plot_rf1_cm <- plot_rf1_cm %>%
mutate(pred = ifelse(plot_rf1_cm$Prediction == plot_rf1_cm$Reference, "correct", "error")) %>%
group_by(Reference) %>%
mutate(prop = Freq/sum(Freq))
plot_nn1_cm <- as.data.frame(nn1_cm$table)
plot_nn1_cm$Prediction <- factor(plot_nn1_cm$Prediction, levels=rev(levels(plot_nn1_cm$Prediction)))
plot_nn1_cm <- plot_nn1_cm %>%
mutate(pred = ifelse(plot_nn1_cm$Prediction == plot_nn1_cm$Reference, "correct", "error")) %>%
group_by(Reference) %>%
mutate(prop = Freq/sum(Freq))
plot_majority_vote_cm <- as.data.frame(majority_vote_cm$table)
plot_majority_vote_cm$Prediction <- factor(plot_majority_vote_cm$Prediction, levels=rev(levels(plot_majority_vote_cm$Prediction)))
plot_majority_vote_cm <- plot_majority_vote_cm %>%
mutate(pred = ifelse(plot_majority_vote_cm$Prediction == plot_majority_vote_cm$Reference, "correct", "error")) %>%
group_by(Reference) %>%
mutate(prop = Freq/sum(Freq))
plot_mean_prob_cm <- as.data.frame(mean_prob_cm$table)
plot_mean_prob_cm$Prediction <- factor(plot_mean_prob_cm$Prediction, levels=rev(levels(plot_mean_prob_cm$Prediction)))
plot_mean_prob_cm <- plot_mean_prob_cm %>%
mutate(pred = ifelse(plot_mean_prob_cm$Prediction == plot_mean_prob_cm$Reference, "correct", "error")) %>%
group_by(Reference) %>%
mutate(prop = Freq/sum(Freq))
plot_knn_cm <- ggplot(plot_knn_cm, aes(Reference, Prediction, fill = pred, alpha = prop)) +
geom_tile() +
theme_bw() +
geom_text(aes(label=Freq), vjust = .5, fontface  = "bold", alpha = 1) +
scale_fill_manual(values = c(correct = "#5DADE2", error = "#EC7063")) +
xlim((levels(plot_knn_cm$Reference))) +
labs(x = "Reference",y = "Prediction", title = "Confusion Matrix: kNN")
plot_os_log_cm <- ggplot(plot_os_log_cm, aes(Reference, Prediction, fill = pred, alpha = prop)) +
geom_tile() +
theme_bw() +
geom_text(aes(label=Freq), vjust = .5, fontface  = "bold", alpha = 1) +
scale_fill_manual(values = c(correct = "#5DADE2", error = "#EC7063")) +
xlim((levels(plot_os_log_cm$Reference))) +
labs(x = "Reference",y = "Prediction", title = "Confusion Matrix: Logistic Regression")
plot_bayes_cm <- ggplot(plot_bayes_cm, aes(Reference, Prediction, fill = pred, alpha = prop)) +
geom_tile() +
theme_bw() +
geom_text(aes(label=Freq), vjust = .5, fontface  = "bold", alpha = 1) +
scale_fill_manual(values = c(correct = "#5DADE2", error = "#EC7063")) +
xlim((levels(plot_bayes_cm$Reference))) +
labs(x = "Reference",y = "Prediction", title = "Confusion Matrix: Naive Bayes")
plot_pruned_tree1_cm <- ggplot(plot_pruned_tree1_cm, aes(Reference, Prediction, fill = pred, alpha = prop)) +
geom_tile() +
theme_bw() +
geom_text(aes(label=Freq), vjust = .5, fontface  = "bold", alpha = 1) +
scale_fill_manual(values = c(correct = "#5DADE2", error = "#EC7063")) +
xlim((levels(plot_pruned_tree1_cm$Reference))) +
labs(x = "Reference",y = "Prediction", title = "Confusion Matrix: Pruned Tree")
plot_boost1_cm <- ggplot(plot_boost1_cm, aes(Reference, Prediction, fill = pred, alpha = prop)) +
geom_tile() +
theme_bw() +
geom_text(aes(label=Freq), vjust = .5, fontface  = "bold", alpha = 1) +
scale_fill_manual(values = c(correct = "#5DADE2", error = "#EC7063")) +
xlim((levels(plot_boost1_cm$Reference))) +
labs(x = "Reference",y = "Prediction", title = "Confusion Matrix: Boosted Tree")
plot_bag1_cm <- ggplot(plot_bag1_cm, aes(Reference, Prediction, fill = pred, alpha = prop)) +
geom_tile() +
theme_bw() +
geom_text(aes(label=Freq), vjust = .5, fontface  = "bold", alpha = 1) +
scale_fill_manual(values = c(correct = "#5DADE2", error = "#EC7063")) +
xlim((levels(plot_bag1_cm$Reference))) +
labs(x = "Reference",y = "Prediction", title = "Confusion Matrix: Bagged Tree")
plot_rf1_cm <- ggplot(plot_rf1_cm, aes(Reference, Prediction, fill = pred, alpha = prop)) +
geom_tile() +
theme_bw() +
geom_text(aes(label=Freq), vjust = .5, fontface  = "bold", alpha = 1) +
scale_fill_manual(values = c(correct = "#5DADE2", error = "#EC7063")) +
xlim((levels(plot_rf1_cm$Reference))) +
labs(x = "Reference",y = "Prediction", title = "Confusion Matrix: Random Forest")
plot_nn1_cm <- ggplot(plot_nn1_cm, aes(Reference, Prediction, fill = pred, alpha = prop)) +
geom_tile() +
theme_bw() +
geom_text(aes(label=Freq), vjust = .5, fontface  = "bold", alpha = 1) +
scale_fill_manual(values = c(correct = "#5DADE2", error = "#EC7063")) +
xlim((levels(plot_nn1_cm$Reference))) +
labs(x = "Reference",y = "Prediction", title = "Confusion Matrix: Neural Net")
plot_majority_vote_cm <- ggplot(plot_majority_vote_cm, aes(Reference, Prediction, fill = pred, alpha = prop)) +
geom_tile() +
theme_bw() +
geom_text(aes(label=Freq), vjust = .5, fontface  = "bold", alpha = 1) +
scale_fill_manual(values = c(correct = "#5DADE2", error = "#EC7063")) +
xlim((levels(plot_majority_vote_cm$Reference))) +
labs(x = "Reference",y = "Prediction", title = "Confusion Matrix: Majority Vote (Ensembles)")
plot_mean_prob_cm <- ggplot(plot_mean_prob_cm, aes(Reference, Prediction, fill = pred, alpha = prop)) +
geom_tile() +
theme_bw() +
geom_text(aes(label=Freq), vjust = .5, fontface  = "bold", alpha = 1) +
scale_fill_manual(values = c(correct = "#5DADE2", error = "#EC7063")) +
xlim((levels(plot_mean_prob_cm$Reference))) +
labs(x = "Reference",y = "Prediction", title = "Confusion Matrix: Mean Probability (Ensembles)")
plot_grid(plot_knn_cm, plot_os_log_cm, plot_bayes_cm, plot_pruned_tree1_cm, plot_boost1_cm, plot_bag1_cm, plot_rf1_cm, plot_nn1_cm, plot_majority_vote_cm, plot_mean_prob_cm)
