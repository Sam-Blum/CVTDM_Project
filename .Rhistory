birth_coord$Players <- players
birth_coord$GS <- grand_slam_win
birth_coord$City = birth_place
birth_coord
data("mtcars")
data("AirPassengers")
data("airquality")
myvec = rnorm(1000)
mymat = matrix(data = sample(1:10000, size = 625), ncol = 25)
mylist = list(myvec,
mtcars,
mymat,
airquality,
AirPassengers)
mean(mtcars$mpg)
mymat[12,15]
type(AirPassengers)
typeof(AirPassengers)
AirPassengers[1]
mean(mylist$mpg)
players <- c("Andy Murray", "Rafael Nadal", "Stan Wawrinka",
"Novak Djokovic", "Roger Federer")
grand_slam_win <- c(9, 15, 5, 12, 18)
date_of_birth <- c("15 May 1987", "3 June 1986", "28 March 1985",
"22 May 1987", "8 August 1981")
country <- c("Great Britain", "Spain", "Switzerland",
"Serbia", "Switzerland")
ATP_ranking <- c(1, 2, 3, 4, 5)
prize_money <- c(60449649, 85920132, 30577981, 109447408, 104445185)
tennis <- data.frame(date_of_birth, grand_slam_win, country,
ATP_ranking, prize_money)
rownames(tennis) <- players
tennis
set.seed(1)
data("mtcars")
data("AirPassengers")
data("airquality")
myvec = rnorm(1000)
mymat = matrix(data = sample(1:10000, size = 625), ncol = 25)
mylist = list(myvec,
mtcars,
mymat,
airquality,
AirPassengers)
print(paste("Mean of mtcars$mpg: ", mean(mylist[[2]]$mpg)))
print(paste("Mean of mtcars$mpg: ", mean(mtcars$mpg)))
print(paste("Mean of mtcars$mpg: ", mean(mylist$mtcars$mpg)))
x = c(5,7)
y = c(6,4)
x > 6 & y > 5
x > 6 && y > 5
x > 4 | y > 5
x > 4 | y > 7
x > 4 & y > 7
x = c(5,7)
y = c(6,4)
x > 4
y > 5
x > 4 & y > 5
x > 4 | y > 5
x = 6
y = 7
(xor(x >= 6 || y < 10, x ==y))
(xor(x >= 6 && y < 10, x ==y))
!TRUE
FALSE & FALSE
FALSE & TRUE
TRUE & TRUE
switch(operator,
"+" = print(paste("Addition of two numbers is: ", number1 + number2)),
"-" = print(paste("Subtraction of two numbers is: ", number1 - number2)),
"*" = print(paste("Multiplication of two numbers is: ", number1 * number2)),
"/" = print(paste("Division of two numbers is: ", number1 / number2))
)
number1 <- 20
number2 <- 5
operator = readline(prompt="Please enter any ARITHMETIC OPERATOR: ")
switch(operator,
"+" = print(paste("Addition of two numbers is: ", number1 + number2)),
"-" = print(paste("Subtraction of two numbers is: ", number1 - number2)),
"*" = print(paste("Multiplication of two numbers is: ", number1 * number2)),
"/" = print(paste("Division of two numbers is: ", number1 / number2))
)
number1 <- 20
number2 <- 5
operator = readline(prompt="Please enter any ARITHMETIC OPERATOR: + ")
switch(operator,
"+" = print(paste("Addition of two numbers is: ", number1 + number2)),
"-" = print(paste("Subtraction of two numbers is: ", number1 - number2)),
"*" = print(paste("Multiplication of two numbers is: ", number1 * number2)),
"/" = print(paste("Division of two numbers is: ", number1 / number2))
number1 <- 20
number2 <- 5
operator = readline(prompt="Please enter any ARITHMETIC OPERATOR: + ")
switch(operator,
"+" = print(paste("Addition of two numbers is: ", number1 + number2)),
"-" = print(paste("Subtraction of two numbers is: ", number1 - number2)),
"*" = print(paste("Multiplication of two numbers is: ", number1 * number2)),
"/" = print(paste("Division of two numbers is: ", number1 / number2))
)
number1 <- 20
number2 <- 5
operator = readline(prompt="Please enter any ARITHMETIC OPERATOR: ")
switch(operator,
"+" = print(paste("Addition of two numbers is: ", number1 + number2)),
"-" = print(paste("Subtraction of two numbers is: ", number1 - number2)),
"*" = print(paste("Multiplication of two numbers is: ", number1 * number2)),
"/" = print(paste("Division of two numbers is: ", number1 / number2))
)
number1 <- 20
number2 <- 5
operator = readline(prompt="Please enter any ARITHMETIC OPERATOR: ")
switch(operator,
"+" = print(paste("Addition of two numbers is: ", number1 + number2)),
"-" = print(paste("Subtraction of two numbers is: ", number1 - number2)),
"*" = print(paste("Multiplication of two numbers is: ", number1 * number2)),
"/" = print(paste("Division of two numbers is: ", number1 / number2))
)
for(i in 1:26 ){
if( i %% 2 == 0 ){
myletter = letters[i]
}
else {myletter = LETTERS[i]}
}
for(i in 1:26 ){
if( i %% 2 == 0 ){
myletter = letters[i]
}
else {myletter = LETTERS[i]}
print(myletter)
}
x = as.matrix(5)
x
install.packages("gapminder")
library (gapminder)
data(gapminder)
gapminder %>%
clean_names() %>%
group_by(continent) %>%
head()
install.packages("gapminder")
library (gapminder)
library (magrittr)
data(gapminder)
gapminder %>%
clean_names() %>%
group_by(continent) %>%
head()
library (gapminder)
library (magrittr)
data(gapminder)
gapminder %>%
clean_names() %>%
group_by(continent) %>%
head()
library (gapminder)
library (magrittr)
library (dplyr)
data(gapminder)
gapminder %>%
clean_names() %>%
group_by(continent) %>%
head()
library (gapminder)
library (magrittr)
library (dplyr)
data(gapminder)
force(gapminder)
gapminder %>%
clean_names() %>%
group_by(continent) %>%
head()
library (janitor)
library (gapminder)
library (magrittr)
library (dplyr)
data(gapminder)
gapminder %>%
clean_names() %>%
group_by(continent) %>%
head()
data (world)
library(poliscidata)
data (world)
data(world)
library (janitor)
library (gapminder)
library (magrittr)
library (dplyr)
library(poliscidata)
data(world)
force(world)
world %>%
clean_names() %>%
select(country, spendeduc, literacy, lifeex_total) %>%
arrange(spendeduc) %>%
slice_tail(n = 5)
library(ggplot2)
library(dummies)
install.packages("dummies")
install.packages("FNN")
install.packages("e1071")
rm(list = ls())
library(ggplot2)
library(dummies)
library(caret)
library(FNN)
library(e1071)
setwd("C:/Users/Sam/Desktop/Data Mining/Tp2")
bank = read.csv(file = "UniversalBank.csv", header = T, sep = ",")
attach(bank)
bank_factor = bank
factor_transfo = c("ID", "Zip.Code", "Family", "Education", "Personal.Loan", "Securities.Account", "CD.account", "Online", "CreditCard")
bank_factor[,factor_transfo] = lapply(bank[,factor_transfo], factor)
bank_factor = bank
factor_transfo = c("ID", "Zip.Code", "Family", "Education", "Personal.Loan", "Securities.Account", "CD.account", "Online", "CreditCard")
bank_factor[,factor_transfo]
setwd("C:/Users/Sam/Desktop/Data Mining/Tp2")
bank = read.csv(file = "UniversalBank.csv", header = T, sep = ",")
attach(bank)
bank_factor = bank
factor_transfo = c("ID", "Zip.Code", "Family", "Education", "Personal.Loan", "Securities.Account", "CD.account", "Online", "CreditCard")
bank_factor[,factor_transfo] = lapply(bank[,factor_transfo], factor)
str(bank)
bank_factor = bank
factor_transfo = c(1,5,6,8,10,11,12,13,14)
bank_factor[,factor_transfo] = lapply(bank[,factor_transfo], factor)
str(bank_factor)
bank_dummy = cbind(bank[1:7], dummy(Education, sep = "_"), bank[9:14])
bank_dummy[,8:10]
bank_dummy = cbind(bank[1:7], dummy(Education, sep = "_"), bank[9:14])
names(bank_dummy)[8:10] = c("Educ_1", "Educ_2", "Educ_3")
sapply(X = bank_factor[,-c(1,5)], FUN = summary)
sapply(X = bank_dummy[,-c(1,5)], FUN = summary)
sapply(X = bank_factor[,-c(1,5)], FUN = summary)
sapply(X = bank_factor[,-c(1,5,6,8,10,11,12,13,14)], FUN = summary)
sapply(X = bank_factor[,c(1,5,6,8,10,11,12,13,14)], FUN = summary)
sapply(X = bank_factor[,c(6,8,10,11,12,13,14)], FUN = summary)
set.seed(1)
train_index = sample(dim(bank_final)[1], 0.6*dim(bank_final)[1])
bank_final = bank_dummy[,-c(1,5)]
set.seed(1)
train_index = sample(dim(bank_final)[1], 0.6*dim(bank_final)[1])
train_index = sample(row.names(bank_final), 0.6*dim(bank_final)[1])
set.seed(1)
train_index = sample(row.names(bank_final), 0.6*dim(bank_final)[1])
valid_index = setdiff(row.names(bank_final), train.index)
set.seed(1)
train_index = sample(row.names(bank_final), 0.6*dim(bank_final)[1])
valid_index = setdiff(row.names(bank_final), train_index)
rm(list = ls())
library(ggplot2)
library(dummies)
library(caret)
library(FNN)
library(e1071)
setwd("C:/Users/Sam/Desktop/Data Mining/Tp2")
bank = read.csv(file = "UniversalBank.csv", header = T, sep = ",")
attach(bank)
str(bank)
bank_factor = bank
factor_transfo = c(1,5,6,8,10,11,12,13,14)
bank_factor[,factor_transfo] = lapply(bank[,factor_transfo], factor)
str(bank_factor)
sapply(X = bank_factor[,-c(1,5,6,8,10,11,12,13,14)], FUN = summary)
sapply(X = bank_factor[,c(6,8,10,11,12,13,14)], FUN = summary)
bank_dummy = cbind(bank[1:7], dummy(Education, sep = "_"), bank[9:14])
names(bank_dummy)[8:10] = c("Educ_1", "Educ_2", "Educ_3")
bank_final = bank_dummy[,-c(1,5)]
set.seed(1)
train_index = sample(row.names(bank_final), 0.6*dim(bank_final)[1])
valid_index = setdiff(row.names(bank_final), train_index)
train_df = bank_final[train_index,]
valid_df = bank_final[valid_index,]
new_obs = data.frame(40,10,84,2,2,0,1,0,0,0,0,1,1)
names(new_obs)<- names(bank_final)[-10]
new_obs
new_obs
trAIN_DF
train_df
str(train_df)
norm_values = preProcess(train_df[,c(1,2,3,5,9)], method = c("center","scale"))
train_norm_df[,c(1,2,3,5,9)] = predict(norm_values, train_df[,c(1,2,3,5,9)])
bank_final_norm = bank_final
train_norm_df = train_df
valid_norm_df = valid_df
norm_values = preProcess(train_df[,c(1,2,3,5,9)], method = c("center","scale"))
train_norm_df[,c(1,2,3,5,9)] = predict(norm_values, train_df[,c(1,2,3,5,9)])
bank_final_norm = bank_final
train_norm_df = train_df
valid_norm_df = valid_df
norm_values = preProcess(train_df[,c(1,2,3,5,9)], method = c("center","scale"))
bank_final_norm[,c(1,2,3,5,9)] = predict(norm_values, bank_final[,c(1,2,3,5,9)])
train_norm_df[,c(1,2,3,5,9)] = predict(norm_values, train_df[,c(1,2,3,5,9)])
valid_norm_df[,c(1,2,3,5,9)] = predict(norm_values, valid_df[,c(1,2,3,5,9)])
new_norm_df = predict(norm_values, new_obs)
new_obs = data.frame(40,10,84,2,2,0,1,0,0,0,0,1,1)
names(new_obs)<- names(bank_final)[-10]
new_obs
bank_final_norm = bank_final
train_norm_df = train_df
valid_norm_df = valid_df
norm_values = preProcess(train_df[,c(1,2,3,5,9)], method = c("center","scale"))
bank_final_norm[,c(1,2,3,5,9)] = predict(norm_values, bank_final[,c(1,2,3,5,9)])
train_norm_df[,c(1,2,3,5,9)] = predict(norm_values, train_df[,c(1,2,3,5,9)])
valid_norm_df[,c(1,2,3,5,9)] = predict(norm_values, valid_df[,c(1,2,3,5,9)])
new_norm_df = predict(norm_values, new_obs)
train_norm_df$Personal.Loan = as.factor(train_norm_df$Personal.Loan)
knn_1 = knn(train = train_norm_df[-10], test = new_norm_df, cl = train_norm_df$Personal.Loan, k = 1)
knn_1
new_obs = data.frame(40,10,84,2,2,0,1,0,0,0,0,1,1)
names(new_obs)<- names(bank_final)[-10]
new_obs
bank_final_norm = bank_final
train_norm_df = train_df
valid_norm_df = valid_df
norm_values = preProcess(train_df[,c(1,2,3,5,9)], method = range)
bank_final_norm[,c(1,2,3,5,9)] = predict(norm_values, bank_final[,c(1,2,3,5,9)])
train_norm_df[,c(1,2,3,5,9)] = predict(norm_values, train_df[,c(1,2,3,5,9)])
valid_norm_df[,c(1,2,3,5,9)] = predict(norm_values, valid_df[,c(1,2,3,5,9)])
new_norm_df = predict(norm_values, new_obs)
train_norm_df$Personal.Loan = as.factor(train_norm_df$Personal.Loan)
knn_1 = knn(train = train_norm_df[-10], test = new_norm_df, cl = train_norm_df$Personal.Loan, k = 1)
knn_1
set.seed(1)
train_index = sample(row.names(bank_final), 0.6*dim(bank_final)[1])
valid_index = setdiff(row.names(bank_final), train_index)
train_df = bank_final[train_index,]
valid_df = bank_final[valid_index,]
new_obs = data.frame(40,10,84,2,2,0,1,0,0,0,0,1,1)
names(new_obs)<- names(bank_final)[-10]
new_obs
bank_final_norm = bank_final
train_norm_df = train_df
valid_norm_df = valid_df
norm_values = preProcess(train_df[,c(1,2,3,5,9)], method = range)
bank_final_norm[,c(1,2,3,5,9)] = predict(norm_values, bank_final[,c(1,2,3,5,9)])
train_norm_df[,c(1,2,3,5,9)] = predict(norm_values, train_df[,c(1,2,3,5,9)])
valid_norm_df[,c(1,2,3,5,9)] = predict(norm_values, valid_df[,c(1,2,3,5,9)])
new_norm_df = predict(norm_values, new_obs)
train_norm_df$Personal.Loan = as.factor(train_norm_df$Personal.Loan)
knn_1 = knn(train = train_norm_df[-10], test = new_norm_df, cl = train_norm_df$Personal.Loan, k = 1)
knn_1
new_obs = data.frame(40,10,84,2,2,0,1,0,0,0,0,1,1)
names(new_obs)<- names(bank_final)[-10]
new_obs
bank_final_norm = bank_final
train_norm_df = train_df
valid_norm_df = valid_df
norm_values = preProcess(train_df[,c(1,2,3,5,9)], method = c("center","scale"))
bank_final_norm[,c(1,2,3,5,9)] = predict(norm_values, bank_final[,c(1,2,3,5,9)])
train_norm_df[,c(1,2,3,5,9)] = predict(norm_values, train_df[,c(1,2,3,5,9)])
valid_norm_df[,c(1,2,3,5,9)] = predict(norm_values, valid_df[,c(1,2,3,5,9)])
new_norm_df = predict(norm_values, new_obs)
train_norm_df$Personal.Loan = as.factor(train_norm_df$Personal.Loan)
knn_1 = knn(train = train_norm_df[-10], test = new_norm_df, cl = train_norm_df$Personal.Loan, k = 1)
knn_1
sapply(X = bank_factor[,-c(1,5,6,8,10,11,12,13,14)], FUN = summary)
rm(list = ls())
library(naniar)
library(ggplot2)
library(reshape2)
library(magrittr)
library(dplyr)
library(car)
library(GGally)
library(viridis)
setwd("~/GitHub/CVTDM_Project")
wine = read.csv(file = "winequality-white.csv", header = T, sep = ";")
rm(list = ls())
library(naniar)
library(ggplot2)
library(reshape2)
library(magrittr)
library(dplyr)
library(car)
library(GGally)
library(viridis)
setwd("~/GitHub/CVTDM_Project")
wine = read.csv(file = "winequality-white.csv", header = T, sep = ";")
dim(wine)
sapply(wine, function(x) length(unique(x)))
wine$quality = as.factor(wine$quality)
summary(wine)
sapply(wine[, -12], sd)
str(wine)
gg_miss_var(wine, show_pct = TRUE)
dim(wine)
sapply(wine, function(x) length(unique(x)))
wine$quality = as.factor(wine$quality)
summary(wine)
sapply(wine[, -12], sd)
str(wine)
gg_miss_var(wine, show_pct = TRUE)
rm(list = ls())
library(naniar)
library(ggplot2)
library(reshape2)
library(magrittr)
library(dplyr)
library(car)
library(GGally)
library(viridis)
setwd("~/GitHub/CVTDM_Project")
wine = read.csv(file = "winequality-white.csv", header = T, sep = ";")
dim(wine)
sapply(wine, function(x) length(unique(x)))
wine$quality = as.factor(wine$quality)
summary(wine)
sapply(wine[, -12], sd)
str(wine)
gg_miss_var(wine, show_pct = TRUE)
boxplots = ggplot(data = melt(wine, "quality"), aes(quality, value, group = quality)) +
geom_boxplot(fill = "transparent", color = "black") +
facet_wrap(~variable, scale = "free", ncol = 3) +
theme_classic()
boxplots
cor_mat = round(cor(wine[,-12]),2)
cor_mat2 = melt(cor_mat)
ggplot(data = cor_mat2, aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +
geom_text(aes(Var2, Var1, label = value), color = "white", size = 3) +
labs(title = "Heatmap of the correlation table") +
theme(axis.text.x = element_text(angle=90))
wine$quality = as.numeric(wine$quality)
model = lm(quality ~., data = wine)
vif(model)
model2 = lm(quality ~., data = wine[,-8])
vif(model2)
wine$quality = as.numeric(wine$quality)
model = lm(quality ~., data = wine)
vif(model)
model2 = lm(quality ~., data = wine[,-8])
vif(model2)
wine = wine[,-8]
str(wine)
wine$quality = as.numeric(wine$quality)
model = lm(quality ~., data = wine)
vif(model)
model2 = lm(quality ~., data = wine[,-8])
vif(model2)
wine = wine[,-8]
wine$quality = as.factor(wine$quality)
str(wine)
logwine = wine
boxplots = ggplot(data = melt(wine, "quality"), aes(quality, value, group = quality)) +
geom_boxplot(fill = "transparent", color = "black") +
facet_wrap(~variable, scale = "free", ncol = 3) +
theme_classic()
boxplots
logwine = wine
logwine[,c(1,2,4,5,6,8,10,11)] = log(logwine[,c(1,2,4,5,6,8,10,11)])
?log
logwine = wine
logwine[,c(1,2,4,5,6,8,10,11)] = lapply(logwine[,c(1,2,4,5,6,8,10,11)], log)
logwine = wine
head(logwine)
logwine[,c(1,2,4,5,6,8,10,11)]
rm(list = ls())
library(naniar)
library(ggplot2)
library(reshape2)
library(magrittr)
library(dplyr)
library(car)
library(GGally)
library(viridis)
setwd("~/GitHub/CVTDM_Project")
wine = read.csv(file = "winequality-white.csv", header = T, sep = ";")
dim(wine)
sapply(wine, function(x) length(unique(x)))
wine$quality = as.factor(wine$quality)
summary(wine)
sapply(wine[, -12], sd)
str(wine)
gg_miss_var(wine, show_pct = TRUE)
logwine = wine
logwine[,c(1,2,4,5,6,8,10,11)] = lapply(logwine[,c(1,2,4,5,6,8,10,11)], log)
logwine
logwine = wine
logwine[,c(1,2,4,5,6,8,10,11)] = lapply(logwine[,c(1,2,4,5,6,8,10,11)], log)
boxplots = ggplot(data = melt(logwine, "quality"), aes(quality, value, group = quality)) +
geom_boxplot(fill = "transparent", color = "black") +
facet_wrap(~variable, scale = "free", ncol = 3) +
theme_classic()
boxplots
boxplots = ggplot(data = melt(wine, "quality"), aes(quality, value, group = quality)) +
geom_boxplot(fill = "transparent", color = "black") +
facet_wrap(~variable, scale = "free", ncol = 3) +
theme_classic()
boxplots
logwine = wine
logwine = lapply(logwine, log)
logwine = wine
logwine[,-12] = lapply(logwine[,-12], log)
boxplots = ggplot(data = melt(logwine, "quality"), aes(quality, value, group = quality)) +
geom_boxplot(fill = "transparent", color = "black") +
facet_wrap(~variable, scale = "free", ncol = 3) +
theme_classic()
boxplots
logwine = wine
logwine[,-12] = lapply(logwine[,-12], log)
boxplots = ggplot(data = melt(logwine, "quality"), aes(quality, value, group = quality)) +
geom_boxplot(fill = "transparent", color = "black") +
facet_wrap(~variable, scale = "free", ncol = 3) +
theme_classic()
boxplots
boxplots = ggplot(data = melt(wine, "quality"), aes(quality, value, group = quality)) +
geom_boxplot(fill = "transparent", color = "black") +
facet_wrap(~variable, scale = "free", ncol = 3) +
theme_classic()
boxplots
