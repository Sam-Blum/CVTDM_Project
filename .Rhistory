kappa = confusionMatrix(best_knn_pred, test_norm_df[,11])$overall[2]
kappa
low_sensitivity = confusionMatrix(best_knn_pred, test_norm_df[,11])$byClass[3,1]
intermediate_sensitivity = confusionMatrix(best_knn_pred, test_norm_df[,11])$byClass[2,1]
high_sensitivity = confusionMatrix(best_knn_pred, test_norm_df[,11])$byClass[1,1]
balanced_accuracy = (low_sensitivity + intermediate_sensitivity + high_sensitivity) / 3
balanced_accuracy
#perform knn classification on the test set using best k = 2
best_knn_pred = knn(train = os_train_norm_df[,-11], test = test_norm_df[,-11], cl = os_train_norm_df[,11], k = 2)
confusionMatrix(best_knn_pred, test_norm_df[,11])#create corresponding confusion matrix
kappa = confusionMatrix(best_knn_pred, test_norm_df[,11])$overall[2]
kappa
low_sensitivity = confusionMatrix(best_knn_pred, test_norm_df[,11])$byClass[3,1]
intermediate_sensitivity = confusionMatrix(best_knn_pred, test_norm_df[,11])$byClass[2,1]
high_sensitivity = confusionMatrix(best_knn_pred, test_norm_df[,11])$byClass[1,1]
balanced_accuracy = (low_sensitivity + intermediate_sensitivity + high_sensitivity) / 3
balanced_accuracy
new_logwine = logwine
new_logwine = rwo(new_logwine, 800, "binned_quality")
os_logwine = rbind(logwine, new_logwine)
set.seed(1)
os_train_index = createDataPartition(os_logwine$binned_quality, p = .5, list = FALSE)
os_train_df = os_logwine[os_train_index,]
#initialize normalized training and validation data frames to the original ones
os_train_norm_df = os_train_df
#use PreProcess() from the caret package and predict() to normalize numerical variables
os_norm_values = preProcess(os_train_df[,-c(11)], method = "range")
os_train_norm_df[,-c(11)] = predict(os_norm_values, os_train_df[,-c(11)])
#initialize a new data frame with three columns: k, accuracy, and balanced_accuracy
best_k_df = data.frame(k = seq(1, 50, 1), kappa = rep(0,50), balanced_accuracy = rep(0,50))
#perform knn on the validation set using different k then store accuracy and balanced accuracy for each k in the data frame
for(i in 1:50) {
knn_pred = knn(train = os_train_norm_df[,-11], test = valid_norm_df[,-11], cl = os_train_norm_df[,11], k = i)
best_k_df[i, 2] = confusionMatrix(knn_pred, valid_norm_df[,11])$overall[2]
low_sensitivity = confusionMatrix(knn_pred, valid_norm_df[,11])$byClass[3,1]
intermediate_sensitivity = confusionMatrix(knn_pred, valid_norm_df[,11])$byClass[2,1]
high_sensitivity = confusionMatrix(knn_pred, valid_norm_df[,11])$byClass[1,1]
best_k_df[i, 3] = (low_sensitivity + intermediate_sensitivity + high_sensitivity) / 3
}
kappa_plot = ggplot(data= best_k_df) + geom_line(aes(x=k,y=kappa), color="red") + theme_classic()
balanced_accuray_plot = ggplot(data= best_k_df) + geom_line(aes(x=k,y=balanced_accuracy), color="blue") + theme_classic()
plot_grid(kappa_plot, balanced_accuray_plot, ncol = 1, align = "v")
which.max(best_k_df$kappa)#best k based on accuracy
which.max(best_k_df$balanced_accuracy)#best k based on balanced accuracy
#perform knn classification on the test set using best k = 1
best_knn_pred = knn(train = os_train_norm_df[,-11], test = test_norm_df[,-11], cl = os_train_norm_df[,11], k = 1)
confusionMatrix(best_knn_pred, test_norm_df[,11])#create corresponding confusion matrix
kappa = confusionMatrix(best_knn_pred, test_norm_df[,11])$overall[2]
kappa
low_sensitivity = confusionMatrix(best_knn_pred, test_norm_df[,11])$byClass[3,1]
intermediate_sensitivity = confusionMatrix(best_knn_pred, test_norm_df[,11])$byClass[2,1]
high_sensitivity = confusionMatrix(best_knn_pred, test_norm_df[,11])$byClass[1,1]
balanced_accuracy = (low_sensitivity + intermediate_sensitivity + high_sensitivity) / 3
balanced_accuracy
#perform knn classification on the test set using best k = 2
best_knn_pred = knn(train = os_train_norm_df[,-11], test = test_norm_df[,-11], cl = os_train_norm_df[,11], k = 2)
confusionMatrix(best_knn_pred, test_norm_df[,11])#create corresponding confusion matrix
kappa = confusionMatrix(best_knn_pred, test_norm_df[,11])$overall[2]
kappa
low_sensitivity = confusionMatrix(best_knn_pred, test_norm_df[,11])$byClass[3,1]
intermediate_sensitivity = confusionMatrix(best_knn_pred, test_norm_df[,11])$byClass[2,1]
high_sensitivity = confusionMatrix(best_knn_pred, test_norm_df[,11])$byClass[1,1]
balanced_accuracy = (low_sensitivity + intermediate_sensitivity + high_sensitivity) / 3
balanced_accuracy
summary(balanced_accuracy)
summary(logwine$binned_quality)
summary(train_df$binned_quality)
new_logwine = logwine
new_logwine = rwo(new_logwine, 800, "binned_quality")
os_logwine = rbind(logwine, new_logwine)
set.seed(1)
os_train_index = createDataPartition(os_logwine$binned_quality, p = .5, list = FALSE)
os_train_df = os_logwine[os_train_index,]
summary(os_train_df$binned_quality)
new_logwine = logwine
new_logwine = rwo(new_logwine, 800, "binned_quality")
os_logwine = rbind(logwine, new_logwine)
set.seed(1)
os_train_index = createDataPartition(os_logwine$binned_quality, p = .5, list = FALSE)
os_train_df = os_logwine[os_train_index,]
#initialize normalized training and validation data frames to the original ones
os_train_norm_df = os_train_df
#use PreProcess() from the caret package and predict() to normalize numerical variables
os_norm_values = preProcess(os_train_df[,-c(11)], method = "range")
os_train_norm_df[,-c(11)] = predict(os_norm_values, os_train_df[,-c(11)])
#initialize a new data frame with three columns: k, accuracy, and balanced_accuracy
best_k_df = data.frame(k = seq(1, 50, 1), kappa = rep(0,50), balanced_accuracy = rep(0,50))
#perform knn on the validation set using different k then store accuracy and balanced accuracy for each k in the data frame
for(i in 1:50) {
knn_pred = knn(train = os_train_norm_df[,-11], test = valid_norm_df[,-11], cl = os_train_norm_df[,11], k = i)
best_k_df[i, 2] = confusionMatrix(knn_pred, valid_norm_df[,11])$overall[2]
low_sensitivity = confusionMatrix(knn_pred, valid_norm_df[,11])$byClass[3,1]
intermediate_sensitivity = confusionMatrix(knn_pred, valid_norm_df[,11])$byClass[2,1]
high_sensitivity = confusionMatrix(knn_pred, valid_norm_df[,11])$byClass[1,1]
best_k_df[i, 3] = (low_sensitivity + intermediate_sensitivity + high_sensitivity) / 3
}
kappa_plot = ggplot(data= best_k_df) + geom_line(aes(x=k,y=kappa), color="red") + theme_classic()
balanced_accuray_plot = ggplot(data= best_k_df) + geom_line(aes(x=k,y=balanced_accuracy), color="blue") + theme_classic()
plot_grid(kappa_plot, balanced_accuray_plot, ncol = 1, align = "v")
which.max(best_k_df$kappa)#best k based on accuracy
which.max(best_k_df$balanced_accuracy)#best k based on balanced accuracy
#perform knn classification on the test set using best k = 2
best_knn_pred = knn(train = os_train_norm_df[,-11], test = test_norm_df[,-11], cl = os_train_norm_df[,11], k = 2)
confusionMatrix(best_knn_pred, test_norm_df[,11])#create corresponding confusion matrix
kappa = confusionMatrix(best_knn_pred, test_norm_df[,11])$overall[2]
kappa
low_sensitivity = confusionMatrix(best_knn_pred, test_norm_df[,11])$byClass[3,1]
intermediate_sensitivity = confusionMatrix(best_knn_pred, test_norm_df[,11])$byClass[2,1]
high_sensitivity = confusionMatrix(best_knn_pred, test_norm_df[,11])$byClass[1,1]
balanced_accuracy = (low_sensitivity + intermediate_sensitivity + high_sensitivity) / 3
balanced_accuracy
#perform knn classification on the test set using best k = 1
best_knn_pred = knn(train = train_norm_df[,-11], test = test_norm_df[,-11], cl = train_norm_df[,11], k = 1)
confusionMatrix(best_knn_pred, test_norm_df[,11])#create corresponding confusion matrix
kappa = confusionMatrix(best_knn_pred, test_norm_df[,11])$overall[2]
kappa
low_sensitivity = confusionMatrix(best_knn_pred, test_norm_df[,11])$byClass[3,1]
intermediate_sensitivity = confusionMatrix(best_knn_pred, test_norm_df[,11])$byClass[2,1]
high_sensitivity = confusionMatrix(best_knn_pred, test_norm_df[,11])$byClass[1,1]
balanced_accuracy = (low_sensitivity + intermediate_sensitivity + high_sensitivity) / 3
balanced_accuracy
new_logwine = logwine
new_logwine = rwo(new_logwine, 800, "binned_quality")
os_logwine = rbind(logwine, new_logwine)
set.seed(1)
os_train_index = createDataPartition(os_logwine$binned_quality, p = .5, list = FALSE)
os_train_df = os_logwine[os_train_index,]
#initialize normalized training and validation data frames to the original ones
os_train_norm_df = os_train_df
#use PreProcess() from the caret package and predict() to normalize numerical variables
os_norm_values = preProcess(os_train_df[,-c(11)], method = "range")
os_train_norm_df[,-c(11)] = predict(os_norm_values, os_train_df[,-c(11)])
#initialize a new data frame with three columns: k, accuracy, and balanced_accuracy
best_k_df = data.frame(k = seq(1, 50, 1), kappa = rep(0,50), balanced_accuracy = rep(0,50))
#perform knn on the validation set using different k then store accuracy and balanced accuracy for each k in the data frame
for(i in 1:50) {
knn_pred = knn(train = os_train_norm_df[,-11], test = valid_norm_df[,-11], cl = os_train_norm_df[,11], k = i)
best_k_df[i, 2] = confusionMatrix(knn_pred, valid_norm_df[,11])$overall[2]
low_sensitivity = confusionMatrix(knn_pred, valid_norm_df[,11])$byClass[3,1]
intermediate_sensitivity = confusionMatrix(knn_pred, valid_norm_df[,11])$byClass[2,1]
high_sensitivity = confusionMatrix(knn_pred, valid_norm_df[,11])$byClass[1,1]
best_k_df[i, 3] = (low_sensitivity + intermediate_sensitivity + high_sensitivity) / 3
}
kappa_plot = ggplot(data= best_k_df) + geom_line(aes(x=k,y=kappa), color="red") + theme_classic()
balanced_accuray_plot = ggplot(data= best_k_df) + geom_line(aes(x=k,y=balanced_accuracy), color="blue") + theme_classic()
plot_grid(kappa_plot, balanced_accuray_plot, ncol = 1, align = "v")
which.max(best_k_df$kappa)#best k based on accuracy
which.max(best_k_df$balanced_accuracy)#best k based on balanced accuracy
#perform knn classification on the test set using best k = 2
best_knn_pred = knn(train = os_train_norm_df[,-11], test = test_norm_df[,-11], cl = os_train_norm_df[,11], k = 2)
confusionMatrix(best_knn_pred, test_norm_df[,11])#create corresponding confusion matrix
kappa = confusionMatrix(best_knn_pred, test_norm_df[,11])$overall[2]
kappa
low_sensitivity = confusionMatrix(best_knn_pred, test_norm_df[,11])$byClass[3,1]
intermediate_sensitivity = confusionMatrix(best_knn_pred, test_norm_df[,11])$byClass[2,1]
high_sensitivity = confusionMatrix(best_knn_pred, test_norm_df[,11])$byClass[1,1]
balanced_accuracy = (low_sensitivity + intermediate_sensitivity + high_sensitivity) / 3
balanced_accuracy
#perform knn classification on the test set using best k = 2
best_knn_pred = knn(train = os_train_norm_df[,-11], test = test_norm_df[,-11], cl = os_train_norm_df[,11], k = 2)
confusionMatrix(best_knn_pred, test_norm_df[,11])#create corresponding confusion matrix
kappa = confusionMatrix(best_knn_pred, test_norm_df[,11])$overall[2]
kappa
low_sensitivity = confusionMatrix(best_knn_pred, test_norm_df[,11])$byClass[3,1]
intermediate_sensitivity = confusionMatrix(best_knn_pred, test_norm_df[,11])$byClass[2,1]
high_sensitivity = confusionMatrix(best_knn_pred, test_norm_df[,11])$byClass[1,1]
balanced_accuracy = (low_sensitivity + intermediate_sensitivity + high_sensitivity) / 3
balanced_accuracy
#perform knn classification on the test set using best k = 2
best_knn_pred = knn(train = os_train_norm_df[,-11], test = test_norm_df[,-11], cl = os_train_norm_df[,11], k = 2)
confusionMatrix(best_knn_pred, test_norm_df[,11])#create corresponding confusion matrix
kappa = confusionMatrix(best_knn_pred, test_norm_df[,11])$overall[2]
kappa
low_sensitivity = confusionMatrix(best_knn_pred, test_norm_df[,11])$byClass[3,1]
intermediate_sensitivity = confusionMatrix(best_knn_pred, test_norm_df[,11])$byClass[2,1]
high_sensitivity = confusionMatrix(best_knn_pred, test_norm_df[,11])$byClass[1,1]
balanced_accuracy = (low_sensitivity + intermediate_sensitivity + high_sensitivity) / 3
balanced_accuracy
log_reg = polr(binned_quality ~ ., data = train_df)
summary(log_reg)
log_reg$fitted.values
log_reg = polr(binned_quality ~ ., data = train_df)
summary(log_reg)
log_pred = data.frame("log_pred" = apply(log_reg$fitted.values, 1, function(x) names(which.max(table(x)))))
log predict()
log_pred
log_reg$fitted.values
log_reg = polr(binned_quality ~ ., data = train_df)
summary(log_reg)
log_pred = data.frame("log_pred" = colnames(log_reg$fitted.values)[apply(log_reg$fitted.values,1,which.max)]
log_reg = polr(binned_quality ~ ., data = train_df)
summary(log_reg)
log_pred = data.frame("log_pred" = colnames(log_reg$fitted.values)[apply(log_reg$fitted.values,1,which.max)])
log_pred
log_reg$fitted.values
log_reg = polr(binned_quality ~ ., data = train_df)
summary(log_reg)
log_pred = data.frame("log_pred" = colnames(log_reg$fitted.values)[apply(log_reg$fitted.values,1,which.max)])
confusionMatrix(log_pred, test_df[,11])
levels(log_pred)
log_pred = data.frame("log_pred" = colnames(log_reg$fitted.values)[apply(log_reg$fitted.values,1,which.max)])
log_pred$log_pred = as.factor(log_pred)
levels(log_pred)
levels(log_pred$log_pred)
log_reg = polr(binned_quality ~ ., data = train_df)
summary(log_reg)
log_pred = data.frame("log_pred" = colnames(log_reg$fitted.values)[apply(log_reg$fitted.values,1,which.max)])
log_pred$log_pred = as.factor(log_pred)
confusionMatrix(log_pred, test_df[,11])
levels(test_df[,11])
log_pred = data.frame("log_pred" = colnames(log_reg$fitted.values)[apply(log_reg$fitted.values,1,which.max)])
log_pred$log_pred = as.factor(log_pred$log_pred)
levels(log_pred$log_pred)
log_reg = polr(binned_quality ~ ., data = train_df)
summary(log_reg)
log_pred = data.frame("log_pred" = colnames(log_reg$fitted.values)[apply(log_reg$fitted.values,1,which.max)])
log_pred$log_pred = as.factor(log_pred$log_pred)
confusionMatrix(log_pred, test_df[,11])
levels(log_pred$log_pred)
levels(test_df[,11])
log_reg = polr(binned_quality ~ ., data = train_df)
summary(log_reg)
log_pred = data.frame("log_pred" = colnames(log_reg$fitted.values)[apply(log_reg$fitted.values,1,which.max)])
log_pred$log_pred = as.factor(log_pred$log_pred)
confusionMatrix(log_pred$log_pred, test_df[,11])
best_knn_pred
dim(best_knn_pred)
dim(log_pred)
dim(test_df)
dim(log_reg)
log_reg = polr(binned_quality ~ ., data = train_df)
summary(log_reg)
log_pred = data.frame("log_pred" = colnames(log_reg$fitted.values)[apply(log_reg$fitted.values,1,which.max)])
log_pred$log_pred = as.factor(log_pred$log_pred)
confusionMatrix(log_pred$log_pred, test_df[,11])
dim(log_reg$fitted.values)
dim(train_df)
log_predict = predict(log_reg, newdata = valid_df, type = "response")
log_reg = polr(binned_quality ~ ., data = train_df)
summary(log_reg)
log_predict = predict(log_reg, newdata = valid_df, type = "response")
?predict
log_reg = polr(binned_quality ~ ., data = train_df)
summary(log_reg)
log_predict = predict(log_reg, newdata = valid_df, type = "p")
log_pred = data.frame("log_pred" = colnames(log_reg$fitted.values)[apply(log_reg$fitted.values,1,which.max)])
log_pred$log_pred = as.factor(log_pred$log_pred)
confusionMatrix(log_pred$log_pred, test_df[,11])
head(log_pred)
head(log_predict)
log_pred = data.frame("log_pred" = colnames(log_predict)[apply(log_predict,1,which.max)])
log_pred$log_pred = as.factor(log_pred$log_pred)
head(log_pred)
levels(log_pred$log_pred)
dim(log_pref)
dim(log_pred)
log_reg = polr(binned_quality ~ ., data = train_df)
summary(log_reg)
log_predict = predict(log_reg, newdata = test_df, type = "p")
log_pred = data.frame("log_pred" = colnames(log_predict)[apply(log_predict,1,which.max)])
log_pred$log_pred = as.factor(log_pred$log_pred)
confusionMatrix(log_pred$log_pred, test_df[,11])
log_reg = polr(binned_quality ~ ., data = train_df)
summary(log_reg)
log_predict = predict(log_reg, newdata = test_df, type = "p")
log_pred = data.frame("log_pred" = colnames(log_predict)[apply(log_predict,1,which.max)])
log_pred$log_pred = as.factor(log_pred$log_pred)
confusionMatrix(log_pred$log_pred, test_df[,11])
log_reg = polr(binned_quality ~ ., data = train_df)
summary(log_reg)
log_predict = predict(log_reg, newdata = test_df, type = "p")
log_pred = data.frame("log_pred" = colnames(log_predict)[apply(log_predict,1,which.max)])
log_pred$log_pred = as.factor(log_pred$log_pred)
confusionMatrix(log_pred$log_pred, test_df[,11])
confusionMatrix(log_pred, test_df[,11])
log_reg = polr(binned_quality ~ ., data = train_df)
summary(log_reg)
log_predict = predict(log_reg, newdata = test_df, type = "p")
log_pred = data.frame("log_pred" = colnames(log_predict)[apply(log_predict,1,which.max)])
log_pred$log_pred = as.factor(log_pred$log_pred)
confusionMatrix(log_pred$log_pred, test_df[,11])
log_reg = polr(binned_quality ~ ., data = train_df)
summary(log_reg)
log_predict = predict(log_reg, newdata = test_df, type = "p")
log_pred = data.frame("log_pred" = colnames(log_predict)[apply(log_predict,1,which.max)])
log_pred$log_pred = as.factor(log_pred$log_pred)
confusionMatrix(log_pred$log_pred, test_df[,11])
log_predict = predict(log_reg, newdata = test_df, type = "p")
log_pred = data.frame("log_pred" = colnames(log_predict)[apply(log_predict,1,which.max)])
log_pred$log_pred = as.factor(log_pred$log_pred)
confusionMatrix(log_pred$log_pred, test_df[,11])
log_predict = predict(log_reg, newdata = test_df, type = "p")
log_pred = data.frame("log_pred" = colnames(log_predict)[apply(log_predict,1,which.max)])
log_pred$log_pred = as.factor(log_pred$log_pred)
confusionMatrix(log_pred$log_pred, test_df[,11], positive = 1)
log_predict = predict(log_reg, newdata = test_df, type = "p")
log_pred = data.frame("log_pred" = colnames(log_predict)[apply(log_predict,1,which.max)])
log_pred$log_pred = as.factor(log_pred$log_pred)
confusionMatrix(log_pred$log_pred, test_df[,11], positive = "1")
log_predict = predict(log_reg, newdata = test_df, type = "p")
log_pred = data.frame("log_pred" = colnames(log_predict)[apply(log_predict,1,which.max)])
log_pred$log_pred = as.factor(log_pred$log_pred)
confusionMatrix(log_pred$log_pred, test_df[,11], positive = "Low")
log_predict = predict(log_reg, newdata = test_df, type = "p")
log_pred = data.frame("log_pred" = colnames(log_predict)[apply(log_predict,1,which.max)])
log_pred$log_pred = as.factor(log_pred$log_pred)
confusionMatrix(log_pred$log_pred, test_df[,11])
log_reg = polr(binned_quality ~ ., data = os_train_df)
summary(log_reg)
os_log_reg = polr(binned_quality ~ ., data = os_train_df)
summary(os_log_reg)
os_log_predict = predict(os_log_reg, newdata = test_df, type = "p")
os_log_pred = data.frame("log_pred" = colnames(os_log_predict)[apply(os_log_predict,1,which.max)])
os_log_pred$log_pred = as.factor(os_log_pred$log_pred)
confusionMatrix(os_log_pred$log_pred, test_df[,11])
log_predict = predict(log_reg, newdata = test_df, type = "p")
log_pred = data.frame("log_pred" = colnames(log_predict)[apply(log_predict,1,which.max)])
log_pred$log_pred = as.factor(log_pred$log_pred)
confusionMatrix(log_pred$log_pred, test_df[,11])
log_reg = polr(binned_quality ~ ., data = train_df)
summary(log_reg)
log_predict = predict(log_reg, newdata = test_df, type = "p")
log_pred = data.frame("log_pred" = colnames(log_predict)[apply(log_predict,1,which.max)])
log_pred$log_pred = as.factor(log_pred$log_pred)
confusionMatrix(log_pred$log_pred, test_df[,11])
log_predict = predict(log_reg, newdata = test_df, type = "p")
log_pred = data.frame("log_pred" = colnames(log_predict)[apply(log_predict,1,which.max)])
log_pred$log_pred = as.factor(log_pred$log_pred)
confusionMatrix(log_pred$log_pred, test_df[,11])
os_log_reg = polr(binned_quality ~ ., data = os_train_df)
summary(os_log_reg)
os_log_predict = predict(os_log_reg, newdata = test_df, type = "p")
os_log_pred = data.frame("log_pred" = colnames(os_log_predict)[apply(os_log_predict,1,which.max)])
os_log_pred$log_pred = as.factor(os_log_pred$log_pred)
confusionMatrix(os_log_pred$log_pred, test_df[,11])
log_reg = polr(binned_quality ~ ., data = train_df)
summary(log_reg)
log_predict = predict(log_reg, newdata = test_df, type = "p")
log_pred = data.frame("pred" = colnames(log_predict)[apply(log_predict,1,which.max)])
log_pred$pred = as.factor(log_pred$pred)
confusionMatrix(log_pred$pred, test_df[,11])
os_log_reg = polr(binned_quality ~ ., data = os_train_df)
summary(os_log_reg)
os_log_predict = predict(os_log_reg, newdata = test_df, type = "p")
os_log_pred = data.frame("pred" = colnames(os_log_predict)[apply(os_log_predict,1,which.max)])
os_log_pred$pred = as.factor(os_log_pred$pred)
confusionMatrix(os_log_pred$pred, test_df[,11])
os_log_predict = predict(os_log_reg, newdata = test_df, type = "p")
os_log_pred = data.frame("pred" = colnames(os_log_predict)[apply(os_log_predict,1,which.max)])
os_log_pred$pred = as.factor(os_log_pred$pred)
confusionMatrix(os_log_pred$pred, test_df[,11])
kappa = confusionMatrix(os_log_pred, test_df[,11])$overall[2]
os_log_predict = predict(os_log_reg, newdata = test_df, type = "p")
os_log_pred = data.frame("pred" = colnames(os_log_predict)[apply(os_log_predict,1,which.max)])
os_log_pred$pred = as.factor(os_log_pred$pred)
confusionMatrix(os_log_pred$pred, test_df[,11])
kappa = confusionMatrix(os_log_pred$pred, test_df[,11])$overall[2]
kappa
low_sensitivity = confusionMatrix(os_log_pred$pred, test_df[,11])$byClass[3,1]
intermediate_sensitivity = confusionMatrix(os_log_pred$pred, test_df[,11])$byClass[2,1]
high_sensitivity = confusionMatrix(os_log_pred$pred, test_df[,11])$byClass[1,1]
balanced_accuracy = (low_sensitivity + intermediate_sensitivity + high_sensitivity) / 3
balanced_accuracy
log_predict = predict(log_reg, newdata = test_df, type = "p")
log_pred = data.frame("pred" = colnames(log_predict)[apply(log_predict,1,which.max)])
log_pred$pred = as.factor(log_pred$pred)
confusionMatrix(log_pred$pred, test_df[,11])
kappa = confusionMatrix(log_pred$pred, test_df[,11])$overall[2]
kappa
low_sensitivity = confusionMatrix(log_pred$pred, test_df[,11])$byClass[3,1]
intermediate_sensitivity = confusionMatrix(log_pred$pred, test_df[,11])$byClass[2,1]
high_sensitivity = confusionMatrix(log_pred$pred, test_df[,11])$byClass[1,1]
balanced_accuracy = (low_sensitivity + intermediate_sensitivity + high_sensitivity) / 3
balanced_accuracy
os_log_predict = predict(os_log_reg, newdata = test_df, type = "p")
os_log_pred = data.frame("pred" = colnames(os_log_predict)[apply(os_log_predict,1,which.max)])
os_log_pred$pred = as.factor(os_log_pred$pred)
confusionMatrix(os_log_pred$pred, test_df[,11])
kappa = confusionMatrix(os_log_pred$pred, test_df[,11])$overall[2]
kappa
low_sensitivity = confusionMatrix(os_log_pred$pred, test_df[,11])$byClass[3,1]
intermediate_sensitivity = confusionMatrix(os_log_pred$pred, test_df[,11])$byClass[2,1]
high_sensitivity = confusionMatrix(os_log_pred$pred, test_df[,11])$byClass[1,1]
balanced_accuracy = (low_sensitivity + intermediate_sensitivity + high_sensitivity) / 3
balanced_accuracy
os_log_predict = predict(os_log_reg, newdata = test_df, type = "p")
os_log_pred = data.frame("pred" = colnames(os_log_predict)[apply(os_log_predict,1,which.max)])
os_log_pred$pred = as.factor(os_log_pred$pred)
confusionMatrix(os_log_pred$pred, test_df[,11])
kappa = confusionMatrix(os_log_pred$pred, test_df[,11])$overall[2]
kappa
low_sensitivity = confusionMatrix(os_log_pred$pred, test_df[,11])$byClass[3,1]
intermediate_sensitivity = confusionMatrix(os_log_pred$pred, test_df[,11])$byClass[2,1]
high_sensitivity = confusionMatrix(os_log_pred$pred, test_df[,11])$byClass[1,1]
balanced_accuracy = (low_sensitivity + intermediate_sensitivity + high_sensitivity) / 3
balanced_accuracy
log_predict = predict(log_reg, newdata = test_df, type = "p")
log_pred = data.frame("pred" = colnames(log_predict)[apply(log_predict,1,which.max)])
log_pred$pred = as.factor(log_pred$pred)
confusionMatrix(log_pred$pred, test_df[,11])
kappa = confusionMatrix(log_pred$pred, test_df[,11])$overall[2]
kappa
low_sensitivity = confusionMatrix(log_pred$pred, test_df[,11])$byClass[3,1]
intermediate_sensitivity = confusionMatrix(log_pred$pred, test_df[,11])$byClass[2,1]
high_sensitivity = confusionMatrix(log_pred$pred, test_df[,11])$byClass[1,1]
balanced_accuracy = (low_sensitivity + intermediate_sensitivity + high_sensitivity) / 3
balanced_accuracy
os_log_predict = predict(os_log_reg, newdata = test_df, type = "p")
os_log_pred = data.frame("pred" = colnames(os_log_predict)[apply(os_log_predict,1,which.max)])
os_log_pred$pred = as.factor(os_log_pred$pred)
confusionMatrix(os_log_pred$pred, test_df[,11])
kappa = confusionMatrix(os_log_pred$pred, test_df[,11])$overall[2]
kappa
low_sensitivity = confusionMatrix(os_log_pred$pred, test_df[,11])$byClass[3,1]
intermediate_sensitivity = confusionMatrix(os_log_pred$pred, test_df[,11])$byClass[2,1]
high_sensitivity = confusionMatrix(os_log_pred$pred, test_df[,11])$byClass[1,1]
balanced_accuracy = (low_sensitivity + intermediate_sensitivity + high_sensitivity) / 3
balanced_accuracy
#initialize a new data frame with three columns: k, accuracy, and balanced_accuracy
best_k_df = data.frame(k = seq(1, 50, 1), kappa = rep(0,50), balanced_accuracy = rep(0,50))
#perform knn on the validation set using different k then store accuracy and balanced accuracy for each k in the data frame
for(i in 1:50) {
knn_pred = knn(train = os_train_norm_df[,-11], test = valid_norm_df[,-11], cl = os_train_norm_df[,11], k = i)
best_k_df[i, 2] = confusionMatrix(knn_pred, valid_norm_df[,11])$overall[2]
low_sensitivity = confusionMatrix(knn_pred, valid_norm_df[,11])$byClass[3,1]
intermediate_sensitivity = confusionMatrix(knn_pred, valid_norm_df[,11])$byClass[2,1]
high_sensitivity = confusionMatrix(knn_pred, valid_norm_df[,11])$byClass[1,1]
best_k_df[i, 3] = (low_sensitivity + intermediate_sensitivity + high_sensitivity) / 3
}
kappa_plot = ggplot(data= best_k_df) + geom_line(aes(x=k,y=kappa), color="red") + theme_classic()
balanced_accuray_plot = ggplot(data= best_k_df) + geom_line(aes(x=k,y=balanced_accuracy), color="blue") + theme_classic()
plot_grid(kappa_plot, balanced_accuray_plot, ncol = 1, align = "v")
which.max(best_k_df$kappa)#best k based on accuracy
which.max(best_k_df$balanced_accuracy)#best k based on balanced accuracy
rm(list = ls())
library(caret)
library(ggplot2)
library(cowplot)
library(FNN)
library(MASS)
library(imbalance)
setwd("C:/Users/Sam/Desktop/Data Mining/Project methods")
wine = read.csv(file = "winequality-white.csv", header = T, sep = ";")
wine$binned_quality = as.factor(ifelse(wine$quality < 5, 'Low',
ifelse(wine$quality >= 5 & wine$quality < 7, "Intermediate",
ifelse(wine$quality >= 7, "High", "None"))))
wine$quality = as.factor(wine$quality)
logwine = wine[,-c(8,12)]
logwine[,-c(3,7,8,11)] = lapply(logwine[,-c(3,7,8,11)], log)
set.seed(1)
train_index = createDataPartition(logwine$binned_quality, p = .5, list = FALSE)
train_df = logwine[train_index,]
valid_test_df = logwine[-train_index,]
valid_index = createDataPartition(valid_test_df$binned_quality, p = .6, list = FALSE)
valid_df = valid_test_df[valid_index,]
test_df = valid_test_df[-valid_index,]
#initialize normalized training and validation data frames to the original ones
train_norm_df = train_df
valid_norm_df = valid_df
test_norm_df = test_df
#use PreProcess() from the caret package and predict() to normalize numerical variables
norm_values = preProcess(train_df[,-c(11)], method = "range")
train_norm_df[,-c(11)] = predict(norm_values, train_df[,-c(11)])
valid_norm_df[,-c(11)] = predict(norm_values, valid_df[,-c(11)])
test_norm_df[,-c(11)] = predict(norm_values, test_df[,-c(11)])
new_logwine = logwine
new_logwine = rwo(new_logwine, 800, "binned_quality")
os_logwine = rbind(logwine, new_logwine)
set.seed(1)
os_train_index = createDataPartition(os_logwine$binned_quality, p = .5, list = FALSE)
os_train_df = os_logwine[os_train_index,]
#initialize normalized training and validation data frames to the original ones
os_train_norm_df = os_train_df
#use PreProcess() from the caret package and predict() to normalize numerical variables
os_norm_values = preProcess(os_train_df[,-c(11)], method = "range")
os_train_norm_df[,-c(11)] = predict(os_norm_values, os_train_df[,-c(11)])
#initialize a new data frame with three columns: k, accuracy, and balanced_accuracy
best_k_df = data.frame(k = seq(1, 50, 1), kappa = rep(0,50), balanced_accuracy = rep(0,50))
#perform knn on the validation set using different k then store accuracy and balanced accuracy for each k in the data frame
for(i in 1:50) {
knn_pred = knn(train = os_train_norm_df[,-11], test = valid_norm_df[,-11], cl = os_train_norm_df[,11], k = i)
best_k_df[i, 2] = confusionMatrix(knn_pred, valid_norm_df[,11])$overall[2]
low_sensitivity = confusionMatrix(knn_pred, valid_norm_df[,11])$byClass[3,1]
intermediate_sensitivity = confusionMatrix(knn_pred, valid_norm_df[,11])$byClass[2,1]
high_sensitivity = confusionMatrix(knn_pred, valid_norm_df[,11])$byClass[1,1]
best_k_df[i, 3] = (low_sensitivity + intermediate_sensitivity + high_sensitivity) / 3
}
kappa_plot = ggplot(data= best_k_df) + geom_line(aes(x=k,y=kappa), color="red") + theme_classic()
balanced_accuray_plot = ggplot(data= best_k_df) + geom_line(aes(x=k,y=balanced_accuracy), color="blue") + theme_classic()
plot_grid(kappa_plot, balanced_accuray_plot, ncol = 1, align = "v")
which.max(best_k_df$kappa)#best k based on accuracy
which.max(best_k_df$balanced_accuracy)#best k based on balanced accuracy
#perform knn classification on the test set using best k = 11
best_knn_pred = knn(train = os_train_norm_df[,-11], test = test_norm_df[,-11], cl = os_train_norm_df[,11], k =11)
confusionMatrix(best_knn_pred, test_norm_df[,11])#create corresponding confusion matrix
kappa = confusionMatrix(best_knn_pred, test_norm_df[,11])$overall[2]
kappa
low_sensitivity = confusionMatrix(best_knn_pred, test_norm_df[,11])$byClass[3,1]
intermediate_sensitivity = confusionMatrix(best_knn_pred, test_norm_df[,11])$byClass[2,1]
high_sensitivity = confusionMatrix(best_knn_pred, test_norm_df[,11])$byClass[1,1]
balanced_accuracy = (low_sensitivity + intermediate_sensitivity + high_sensitivity) / 3
balanced_accuracy
#perform knn classification on the test set using best k = 2
best_knn_pred = knn(train = os_train_norm_df[,-11], test = test_norm_df[,-11], cl = os_train_norm_df[,11], k = 2)
confusionMatrix(best_knn_pred, test_norm_df[,11])#create corresponding confusion matrix
kappa = confusionMatrix(best_knn_pred, test_norm_df[,11])$overall[2]
kappa
low_sensitivity = confusionMatrix(best_knn_pred, test_norm_df[,11])$byClass[3,1]
intermediate_sensitivity = confusionMatrix(best_knn_pred, test_norm_df[,11])$byClass[2,1]
high_sensitivity = confusionMatrix(best_knn_pred, test_norm_df[,11])$byClass[1,1]
balanced_accuracy = (low_sensitivity + intermediate_sensitivity + high_sensitivity) / 3
balanced_accuracy
